{"version":3,"file":"mercury-formdata-manage.js","mappings":"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","sources":["webpack://mercury-template/./template-src/js/formdata-manage.js"],"sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Submissions dialog.\n */\nclass SubmissionsDialog {\n\n    /**\n     * Creates a new submissions dialog.\n     * @param element the formdata manage root element\n     * @param dialog the dialog element\n     */\n    constructor(element, dialog) {\n        const action = dialog.dataset.action;\n        const itemId = dialog.dataset.itemId;\n        const uuid = dialog.dataset.contentId;\n        const button = element.querySelector(\"#\" + action + \"_button_\" + itemId);\n        const params = new URLSearchParams(location.search);\n        const formmanage = params.get(\"formmanage\");\n        button.addEventListener(\"click\", () =>  { dialog.showModal(); });\n        dialog.addEventListener(\"close\", () => {\n            if (dialog.returnValue == \"confirm\") {\n                location.href = \"?formmanage=\" + formmanage + \"&action=\" + action + \"&uuid=\" + uuid;\n            }\n        });\n    }\n}\n\n/**\n * Submissions select.\n */\nclass SubmissionsSelect {\n\n    /**\n     * Creates a new submissions select.\n     * @param element the formdata manage root element\n     */\n    constructor(element) {\n        this.m_buttonExportCsv = element.querySelector(\".btn-export-csv\");\n        this.m_buttonExportExcel = element.querySelector(\".btn-export-excel\");\n        this.m_itemSelectStart = element.querySelector(\".acco-item-select-start\");\n        this.m_itemSelectAll = element.querySelector(\".acco-item-select-all\");\n        this.m_itemSelectNone = element.querySelector(\".acco-item-select-none\");\n        this.m_checkbox = element.querySelectorAll(\".acco-item-check\");\n        const valid = this.m_buttonExportCsv && this.m_buttonExportExcel\n                && this.m_itemSelectStart && this.m_itemSelectAll && this.m_itemSelectNone;\n        if (valid) {\n            this.m_buttonExportCsv.addEventListener(\"click\", (event) => this.onExport(event) );\n            this.m_buttonExportExcel.addEventListener(\"click\", (event) => this.onExport(event) );\n            this.m_itemSelectStart.addEventListener(\"click\", (event) => this.onSelectStart(event) );\n            this.m_itemSelectAll.addEventListener(\"click\", (event) => this.onSelectAll(event) );\n            this.m_itemSelectNone.addEventListener(\"click\", (event) => this.onSelectNone(event) );\n            this.m_itemSelectAll.style.display = \"none\";\n            this.m_itemSelectNone.style.display = \"none\";\n        }\n    }\n\n    /**\n     * Creates and configures a HTTP client.\n     * @param url The URL to configure the HTTP client for\n     */\n    createHttpRequest(url) {\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open(\"POST\", url, true);\n        httpRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        httpRequest.responseType = \"arraybuffer\";\n        return httpRequest;\n    }\n\n    /**\n     * Returns the IDs of all checked items.\n     */\n    getCheckedItemIds() {\n        let items = [];\n        this.m_checkbox.forEach(checkbox => {\n            if (checkbox.checked) {\n                items.push(checkbox.value);\n            }\n        });\n        return items;\n    }\n\n    /**\n     * Select start handler.\n     */\n    onSelectStart(event) {\n        event.preventDefault();\n        this.m_itemSelectStart.style.display = \"none\";\n        this.m_itemSelectAll.style.display = \"inline-block\";\n        this.m_itemSelectNone.style.display = \"inline-block\";\n        this.m_checkbox.forEach(checkbox => {\n            checkbox.style.display = \"inline-block\";\n        });\n    }\n\n    /**\n     * Select all handler.\n     */\n    onSelectAll(event) {\n        event.preventDefault();\n        this.selectAll(true);\n    }\n\n    /**\n     * Select none handler.\n     */\n    onSelectNone(event) {\n        event.preventDefault();\n        this.selectAll(false);\n    }\n\n    /**\n     * Export handler.\n     * @param event the event\n     */\n    onExport(event) {\n        event.preventDefault();\n        const ids = this.getCheckedItemIds();\n        const httpRequest = this.createHttpRequest(event.target.href);\n        const requestData = this.m_checkbox.length == ids.length ? \"\" : \"formdata=\" + ids.join(\",\");\n        httpRequest.send(requestData);\n        console.log(httpRequest);\n        console.log(requestData);\n        httpRequest.onload = function onload() {\n            const type = this.getResponseHeader(\"Content-Type\");\n            const disp = this.getResponseHeader(\"Content-Disposition\");\n            let name = \"download\";\n            if (disp.includes(\"filename=\")) {\n                name = disp.substring(disp.indexOf(\"filename=\") + \"filename=\".length);\n            }\n            const data = this.response;\n            const blob = new Blob([data], { type });\n            blob.name = name;\n            const reader = new FileReader();\n            reader.onload = e => {\n                const anchor = document.createElement('a');\n                anchor.style.display = 'none';\n                anchor.href = e.target.result;\n                anchor.download = name;\n                anchor.click();\n            };\n            reader.readAsDataURL(blob);\n        }\n    }\n\n    /**\n     * Checks or unchecks all chechboxes.\n     * @param check whether to check or uncheck\n     */\n    selectAll(check) {\n        this.m_checkbox.forEach(checkbox => {\n            checkbox.checked = check;\n        });\n    }\n}\n\n/**\n * Initializes all components.\n */\nexport function init() {\n\n    const formdataManage = document.querySelectorAll(\".formdata-manage\");\n    formdataManage.forEach(element => {\n        new SubmissionsSelect(element);\n        const dialogs = element.querySelectorAll(\".submissions-dialog\");\n        dialogs.forEach(dialog => {\n            new SubmissionsDialog(element, dialog);\n        });\n    });\n}\n"],"names":["SubmissionsDialog","constructor","element","dialog","action","dataset","itemId","uuid","contentId","button","querySelector","formmanage","URLSearchParams","location","search","get","addEventListener","showModal","returnValue","href","SubmissionsSelect","this","m_buttonExportCsv","m_buttonExportExcel","m_itemSelectStart","m_itemSelectAll","m_itemSelectNone","m_checkbox","querySelectorAll","event","onExport","onSelectStart","onSelectAll","onSelectNone","style","display","createHttpRequest","url","httpRequest","XMLHttpRequest","open","setRequestHeader","responseType","getCheckedItemIds","items","forEach","checkbox","checked","push","value","preventDefault","selectAll","ids","target","requestData","length","join","send","console","log","onload","type","getResponseHeader","disp","name","includes","substring","indexOf","data","response","blob","Blob","reader","FileReader","e","anchor","document","createElement","result","download","click","readAsDataURL","check","init"],"sourceRoot":""}