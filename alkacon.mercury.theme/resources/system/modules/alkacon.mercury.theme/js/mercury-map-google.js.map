{"version":3,"file":"mercury-map-google.js","mappings":"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","sources":["webpack://mercury-template/./node_modules/kdbush/index.js","webpack://mercury-template/./node_modules/supercluster/index.js","webpack://mercury-template/./node_modules/@googlemaps/markerclusterer/dist/index.esm.js","webpack://mercury-template/./node_modules/fast-deep-equal/index.js","webpack://mercury-template/./template-src/js/map-google.js"],"sourcesContent":["\nconst ARRAY_TYPES = [\n    Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,\n    Int32Array, Uint32Array, Float32Array, Float64Array\n];\n\n/** @typedef {Int8ArrayConstructor | Uint8ArrayConstructor | Uint8ClampedArrayConstructor | Int16ArrayConstructor | Uint16ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor | Float64ArrayConstructor} TypedArrayConstructor */\n\nconst VERSION = 1; // serialized format version\nconst HEADER_SIZE = 8;\n\nexport default class KDBush {\n\n    /**\n     * Creates an index from raw `ArrayBuffer` data.\n     * @param {ArrayBuffer} data\n     */\n    static from(data) {\n        if (!(data instanceof ArrayBuffer)) {\n            throw new Error('Data must be an instance of ArrayBuffer.');\n        }\n        const [magic, versionAndType] = new Uint8Array(data, 0, 2);\n        if (magic !== 0xdb) {\n            throw new Error('Data does not appear to be in a KDBush format.');\n        }\n        const version = versionAndType >> 4;\n        if (version !== VERSION) {\n            throw new Error(`Got v${version} data when expected v${VERSION}.`);\n        }\n        const ArrayType = ARRAY_TYPES[versionAndType & 0x0f];\n        if (!ArrayType) {\n            throw new Error('Unrecognized array type.');\n        }\n        const [nodeSize] = new Uint16Array(data, 2, 1);\n        const [numItems] = new Uint32Array(data, 4, 1);\n\n        return new KDBush(numItems, nodeSize, ArrayType, data);\n    }\n\n    /**\n     * Creates an index that will hold a given number of items.\n     * @param {number} numItems\n     * @param {number} [nodeSize=64] Size of the KD-tree node (64 by default).\n     * @param {TypedArrayConstructor} [ArrayType=Float64Array] The array type used for coordinates storage (`Float64Array` by default).\n     * @param {ArrayBuffer} [data] (For internal use only)\n     */\n    constructor(numItems, nodeSize = 64, ArrayType = Float64Array, data) {\n        if (isNaN(numItems) || numItems < 0) throw new Error(`Unpexpected numItems value: ${numItems}.`);\n\n        this.numItems = +numItems;\n        this.nodeSize = Math.min(Math.max(+nodeSize, 2), 65535);\n        this.ArrayType = ArrayType;\n        this.IndexArrayType = numItems < 65536 ? Uint16Array : Uint32Array;\n\n        const arrayTypeIndex = ARRAY_TYPES.indexOf(this.ArrayType);\n        const coordsByteSize = numItems * 2 * this.ArrayType.BYTES_PER_ELEMENT;\n        const idsByteSize = numItems * this.IndexArrayType.BYTES_PER_ELEMENT;\n        const padCoords = (8 - idsByteSize % 8) % 8;\n\n        if (arrayTypeIndex < 0) {\n            throw new Error(`Unexpected typed array class: ${ArrayType}.`);\n        }\n\n        if (data && (data instanceof ArrayBuffer)) { // reconstruct an index from a buffer\n            this.data = data;\n            this.ids = new this.IndexArrayType(this.data, HEADER_SIZE, numItems);\n            this.coords = new this.ArrayType(this.data, HEADER_SIZE + idsByteSize + padCoords, numItems * 2);\n            this._pos = numItems * 2;\n            this._finished = true;\n        } else { // initialize a new index\n            this.data = new ArrayBuffer(HEADER_SIZE + coordsByteSize + idsByteSize + padCoords);\n            this.ids = new this.IndexArrayType(this.data, HEADER_SIZE, numItems);\n            this.coords = new this.ArrayType(this.data, HEADER_SIZE + idsByteSize + padCoords, numItems * 2);\n            this._pos = 0;\n            this._finished = false;\n\n            // set header\n            new Uint8Array(this.data, 0, 2).set([0xdb, (VERSION << 4) + arrayTypeIndex]);\n            new Uint16Array(this.data, 2, 1)[0] = nodeSize;\n            new Uint32Array(this.data, 4, 1)[0] = numItems;\n        }\n    }\n\n    /**\n     * Add a point to the index.\n     * @param {number} x\n     * @param {number} y\n     * @returns {number} An incremental index associated with the added item (starting from `0`).\n     */\n    add(x, y) {\n        const index = this._pos >> 1;\n        this.ids[index] = index;\n        this.coords[this._pos++] = x;\n        this.coords[this._pos++] = y;\n        return index;\n    }\n\n    /**\n     * Perform indexing of the added points.\n     */\n    finish() {\n        const numAdded = this._pos >> 1;\n        if (numAdded !== this.numItems) {\n            throw new Error(`Added ${numAdded} items when expected ${this.numItems}.`);\n        }\n        // kd-sort both arrays for efficient search\n        sort(this.ids, this.coords, this.nodeSize, 0, this.numItems - 1, 0);\n\n        this._finished = true;\n        return this;\n    }\n\n    /**\n     * Search the index for items within a given bounding box.\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} maxX\n     * @param {number} maxY\n     * @returns {number[]} An array of indices correponding to the found items.\n     */\n    range(minX, minY, maxX, maxY) {\n        if (!this._finished) throw new Error('Data not yet indexed - call index.finish().');\n\n        const {ids, coords, nodeSize} = this;\n        const stack = [0, ids.length - 1, 0];\n        const result = [];\n\n        // recursively search for items in range in the kd-sorted arrays\n        while (stack.length) {\n            const axis = stack.pop() || 0;\n            const right = stack.pop() || 0;\n            const left = stack.pop() || 0;\n\n            // if we reached \"tree node\", search linearly\n            if (right - left <= nodeSize) {\n                for (let i = left; i <= right; i++) {\n                    const x = coords[2 * i];\n                    const y = coords[2 * i + 1];\n                    if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n                }\n                continue;\n            }\n\n            // otherwise find the middle index\n            const m = (left + right) >> 1;\n\n            // include the middle item if it's in range\n            const x = coords[2 * m];\n            const y = coords[2 * m + 1];\n            if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n            // queue search in halves that intersect the query\n            if (axis === 0 ? minX <= x : minY <= y) {\n                stack.push(left);\n                stack.push(m - 1);\n                stack.push(1 - axis);\n            }\n            if (axis === 0 ? maxX >= x : maxY >= y) {\n                stack.push(m + 1);\n                stack.push(right);\n                stack.push(1 - axis);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Search the index for items within a given radius.\n     * @param {number} qx\n     * @param {number} qy\n     * @param {number} r Query radius.\n     * @returns {number[]} An array of indices correponding to the found items.\n     */\n    within(qx, qy, r) {\n        if (!this._finished) throw new Error('Data not yet indexed - call index.finish().');\n\n        const {ids, coords, nodeSize} = this;\n        const stack = [0, ids.length - 1, 0];\n        const result = [];\n        const r2 = r * r;\n\n        // recursively search for items within radius in the kd-sorted arrays\n        while (stack.length) {\n            const axis = stack.pop() || 0;\n            const right = stack.pop() || 0;\n            const left = stack.pop() || 0;\n\n            // if we reached \"tree node\", search linearly\n            if (right - left <= nodeSize) {\n                for (let i = left; i <= right; i++) {\n                    if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n                }\n                continue;\n            }\n\n            // otherwise find the middle index\n            const m = (left + right) >> 1;\n\n            // include the middle item if it's in range\n            const x = coords[2 * m];\n            const y = coords[2 * m + 1];\n            if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n            // queue search in halves that intersect the query\n            if (axis === 0 ? qx - r <= x : qy - r <= y) {\n                stack.push(left);\n                stack.push(m - 1);\n                stack.push(1 - axis);\n            }\n            if (axis === 0 ? qx + r >= x : qy + r >= y) {\n                stack.push(m + 1);\n                stack.push(right);\n                stack.push(1 - axis);\n            }\n        }\n\n        return result;\n    }\n}\n\n/**\n * @param {Uint16Array | Uint32Array} ids\n * @param {InstanceType<TypedArrayConstructor>} coords\n * @param {number} nodeSize\n * @param {number} left\n * @param {number} right\n * @param {number} axis\n */\nfunction sort(ids, coords, nodeSize, left, right, axis) {\n    if (right - left <= nodeSize) return;\n\n    const m = (left + right) >> 1; // middle index\n\n    // sort ids and coords around the middle index so that the halves lie\n    // either left/right or top/bottom correspondingly (taking turns)\n    select(ids, coords, m, left, right, axis);\n\n    // recursively kd-sort first half and second half on the opposite axis\n    sort(ids, coords, nodeSize, left, m - 1, 1 - axis);\n    sort(ids, coords, nodeSize, m + 1, right, 1 - axis);\n}\n\n/**\n * Custom Floyd-Rivest selection algorithm: sort ids and coords so that\n * [left..k-1] items are smaller than k-th item (on either x or y axis)\n * @param {Uint16Array | Uint32Array} ids\n * @param {InstanceType<TypedArrayConstructor>} coords\n * @param {number} k\n * @param {number} left\n * @param {number} right\n * @param {number} axis\n */\nfunction select(ids, coords, k, left, right, axis) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, axis);\n        }\n\n        const t = coords[2 * k + axis];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + axis] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + axis] < t) i++;\n            while (coords[2 * j + axis] > t) j--;\n        }\n\n        if (coords[2 * left + axis] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\n/**\n * @param {Uint16Array | Uint32Array} ids\n * @param {InstanceType<TypedArrayConstructor>} coords\n * @param {number} i\n * @param {number} j\n */\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\n/**\n * @param {InstanceType<TypedArrayConstructor>} arr\n * @param {number} i\n * @param {number} j\n */\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * @param {number} ax\n * @param {number} ay\n * @param {number} bx\n * @param {number} by\n */\nfunction sqDist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n","\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nconst OFFSET_ZOOM = 2;\nconst OFFSET_ID = 3;\nconst OFFSET_PARENT = 4;\nconst OFFSET_NUM = 5;\nconst OFFSET_PROP = 6;\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = Object.assign(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n        this.stride = this.options.reduce ? 7 : 6;\n        this.clusterProps = [];\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        const data = [];\n\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            if (!p.geometry) continue;\n\n            const [lng, lat] = p.geometry.coordinates;\n            const x = fround(lngX(lng));\n            const y = fround(latY(lat));\n            // store internal point/cluster data in flat numeric arrays for performance\n            data.push(\n                x, y, // projected point coordinates\n                Infinity, // the last zoom the point was processed at\n                i, // index of the source feature in the original input array\n                -1, // parent cluster id\n                1 // number of points in a cluster\n            );\n            if (this.options.reduce) data.push(0); // noop\n        }\n        let tree = this.trees[maxZoom + 1] = this._createTree(data);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            tree = this.trees[z] = this._createTree(this._cluster(tree, z));\n\n            if (log) console.log('z%d: %d clusters in %dms', z, tree.numItems, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const data = tree.data;\n        const clusters = [];\n        for (const id of ids) {\n            const k = this.stride * id;\n            clusters.push(data[k + OFFSET_NUM] > 1 ? getClusterJSON(data, k, this.clusterProps) : this.points[data[k + OFFSET_ID]]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const tree = this.trees[originZoom];\n        if (!tree) throw new Error(errorMsg);\n\n        const data = tree.data;\n        if (originId * this.stride >= data.length) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const x = data[originId * this.stride];\n        const y = data[originId * this.stride + 1];\n        const ids = tree.within(x, y, r);\n        const children = [];\n        for (const id of ids) {\n            const k = id * this.stride;\n            if (data[k + OFFSET_PARENT] === clusterId) {\n                children.push(data[k + OFFSET_NUM] > 1 ? getClusterJSON(data, k, this.clusterProps) : this.points[data[k + OFFSET_ID]]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.data, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.data, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.data, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _createTree(data) {\n        const tree = new KDBush(data.length / this.stride | 0, this.options.nodeSize, Float32Array);\n        for (let i = 0; i < data.length; i += this.stride) tree.add(data[i], data[i + 1]);\n        tree.finish();\n        tree.data = data;\n        return tree;\n    }\n\n    _addTileFeatures(ids, data, x, y, z2, tile) {\n        for (const i of ids) {\n            const k = i * this.stride;\n            const isCluster = data[k + OFFSET_NUM] > 1;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(data, k, this.clusterProps);\n                px = data[k];\n                py = data[k + 1];\n            } else {\n                const p = this.points[data[k + OFFSET_ID]];\n                tags = p.properties;\n                const [lng, lat] = p.geometry.coordinates;\n                px = lngX(lng);\n                py = latY(lat);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster || this.options.generateId) {\n                // optionally generate id for points\n                id = data[k + OFFSET_ID];\n            } else {\n                // keep id if already assigned\n                id = this.points[data[k + OFFSET_ID]].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));\n    }\n\n    _cluster(tree, zoom) {\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n        const data = tree.data;\n        const nextData = [];\n        const stride = this.stride;\n\n        // loop through each point\n        for (let i = 0; i < data.length; i += stride) {\n            // if we've already visited the point at this zoom level, skip it\n            if (data[i + OFFSET_ZOOM] <= zoom) continue;\n            data[i + OFFSET_ZOOM] = zoom;\n\n            // find all nearby points\n            const x = data[i];\n            const y = data[i + 1];\n            const neighborIds = tree.within(data[i], data[i + 1], r);\n\n            const numPointsOrigin = data[i + OFFSET_NUM];\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const k = neighborId * stride;\n                // filter out neighbors that are already processed\n                if (data[k + OFFSET_ZOOM] > zoom) numPoints += data[k + OFFSET_NUM];\n            }\n\n            // if there were neighbors to merge, and there are enough points to form a cluster\n            if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n                let wx = x * numPointsOrigin;\n                let wy = y * numPointsOrigin;\n\n                let clusterProperties;\n                let clusterPropIndex = -1;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = ((i / stride | 0) << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const k = neighborId * stride;\n\n                    if (data[k + OFFSET_ZOOM] <= zoom) continue;\n                    data[k + OFFSET_ZOOM] = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = data[k + OFFSET_NUM];\n                    wx += data[k] * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += data[k + 1] * numPoints2;\n\n                    data[k + OFFSET_PARENT] = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) {\n                            clusterProperties = this._map(data, i, true);\n                            clusterPropIndex = this.clusterProps.length;\n                            this.clusterProps.push(clusterProperties);\n                        }\n                        reduce(clusterProperties, this._map(data, k));\n                    }\n                }\n\n                data[i + OFFSET_PARENT] = id;\n                nextData.push(wx / numPoints, wy / numPoints, Infinity, id, -1, numPoints);\n                if (reduce) nextData.push(clusterPropIndex);\n\n            } else { // left points as unclustered\n                for (let j = 0; j < stride; j++) nextData.push(data[i + j]);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const k = neighborId * stride;\n                        if (data[k + OFFSET_ZOOM] <= zoom) continue;\n                        data[k + OFFSET_ZOOM] = zoom;\n                        for (let j = 0; j < stride; j++) nextData.push(data[k + j]);\n                    }\n                }\n            }\n        }\n\n        return nextData;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(data, i, clone) {\n        if (data[i + OFFSET_NUM] > 1) {\n            const props = this.clusterProps[data[i + OFFSET_PROP]];\n            return clone ? Object.assign({}, props) : props;\n        }\n        const original = this.points[data[i + OFFSET_ID]].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? Object.assign({}, result) : result;\n    }\n}\n\nfunction getClusterJSON(data, i, clusterProps) {\n    return {\n        type: 'Feature',\n        id: data[i + OFFSET_ID],\n        properties: getClusterProperties(data, i, clusterProps),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(data[i]), yLat(data[i + 1])]\n        }\n    };\n}\n\nfunction getClusterProperties(data, i, clusterProps) {\n    const count = data[i + OFFSET_NUM];\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    const propIndex = data[i + OFFSET_PROP];\n    const properties = propIndex === -1 ? {} : Object.assign({}, clusterProps[propIndex]);\n    return Object.assign(properties, {\n        cluster: true,\n        cluster_id: data[i + OFFSET_ID],\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n","import equal from 'fast-deep-equal';\nimport SuperCluster from 'supercluster';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * util class that creates a common set of convenience functions to wrap\n * shared behavior of Advanced Markers and Markers.\n */\nclass MarkerUtils {\n    static isAdvancedMarkerAvailable(map) {\n        return (google.maps.marker &&\n            map.getMapCapabilities().isAdvancedMarkersAvailable === true);\n    }\n    static isAdvancedMarker(marker) {\n        return (google.maps.marker &&\n            marker instanceof google.maps.marker.AdvancedMarkerElement);\n    }\n    static setMap(marker, map) {\n        if (this.isAdvancedMarker(marker)) {\n            marker.map = map;\n        }\n        else {\n            marker.setMap(map);\n        }\n    }\n    static getPosition(marker) {\n        // SuperClusterAlgorithm.calculate expects a LatLng instance so we fake it for Adv Markers\n        if (this.isAdvancedMarker(marker)) {\n            if (marker.position) {\n                if (marker.position instanceof google.maps.LatLng) {\n                    return marker.position;\n                }\n                // since we can't cast to LatLngLiteral for reasons =(\n                if (marker.position.lat && marker.position.lng) {\n                    return new google.maps.LatLng(marker.position.lat, marker.position.lng);\n                }\n            }\n            return new google.maps.LatLng(null);\n        }\n        return marker.getPosition();\n    }\n    static getVisible(marker) {\n        if (this.isAdvancedMarker(marker)) {\n            /**\n             * Always return true for Advanced Markers because the clusterer\n             * uses getVisible as a way to count legacy markers not as an actual\n             * indicator of visibility for some reason. Even when markers are hidden\n             * Marker.getVisible returns `true` and this is used to set the marker count\n             * on the cluster. See the behavior of Cluster.count\n             */\n            return true;\n        }\n        return marker.getVisible();\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n    constructor({ markers, position }) {\n        this.markers = markers;\n        if (position) {\n            if (position instanceof google.maps.LatLng) {\n                this._position = position;\n            }\n            else {\n                this._position = new google.maps.LatLng(position);\n            }\n        }\n    }\n    get bounds() {\n        if (this.markers.length === 0 && !this._position) {\n            return;\n        }\n        const bounds = new google.maps.LatLngBounds(this._position, this._position);\n        for (const marker of this.markers) {\n            bounds.extend(MarkerUtils.getPosition(marker));\n        }\n        return bounds;\n    }\n    get position() {\n        return this._position || this.bounds.getCenter();\n    }\n    /**\n     * Get the count of **visible** markers.\n     */\n    get count() {\n        return this.markers.filter((m) => MarkerUtils.getVisible(m)).length;\n    }\n    /**\n     * Add a marker to the cluster.\n     */\n    push(marker) {\n        this.markers.push(marker);\n    }\n    /**\n     * Cleanup references and remove marker from map.\n     */\n    delete() {\n        if (this.marker) {\n            MarkerUtils.setMap(this.marker, null);\n            this.marker = undefined;\n        }\n        this.markers.length = 0;\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the markers visible in a padded map viewport\n *\n * @param map\n * @param mapCanvasProjection\n * @param markers The list of marker to filter\n * @param viewportPaddingPixels The padding in pixel\n * @returns The list of markers in the padded viewport\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPaddingPixels) => {\n    const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPaddingPixels);\n    return markers.filter((marker) => extendedMapBounds.contains(MarkerUtils.getPosition(marker)));\n};\n/**\n * Extends a bounds by a number of pixels in each direction\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, numPixels) => {\n    const { northEast, southWest } = latLngBoundsToPixelBounds(bounds, projection);\n    const extendedPixelBounds = extendPixelBounds({ northEast, southWest }, numPixels);\n    return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * Gets the extended bounds as a bbox [westLng, southLat, eastLng, northLat]\n */\nconst getPaddedViewport = (bounds, projection, pixels) => {\n    const extended = extendBoundsToPaddedViewport(bounds, projection, pixels);\n    const ne = extended.getNorthEast();\n    const sw = extended.getSouthWest();\n    return [sw.lng(), sw.lat(), ne.lng(), ne.lat()];\n};\n/**\n * Returns the distance between 2 positions.\n *\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = ((p2.lat - p1.lat) * Math.PI) / 180;\n    const dLon = ((p2.lng - p1.lng) * Math.PI) / 180;\n    const sinDLat = Math.sin(dLat / 2);\n    const sinDLon = Math.sin(dLon / 2);\n    const a = sinDLat * sinDLat +\n        Math.cos((p1.lat * Math.PI) / 180) *\n            Math.cos((p2.lat * Math.PI) / 180) *\n            sinDLon *\n            sinDLon;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n/**\n * Converts a LatLng bound to pixels.\n *\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n    return {\n        northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n        southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest()),\n    };\n};\n/**\n * Extends a pixel bounds by numPixels in all directions.\n *\n * @hidden\n */\nconst extendPixelBounds = ({ northEast, southWest }, numPixels) => {\n    northEast.x += numPixels;\n    northEast.y -= numPixels;\n    southWest.x -= numPixels;\n    southWest.y += numPixels;\n    return { northEast, southWest };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = ({ northEast, southWest }, projection) => {\n    const sw = projection.fromDivPixelToLatLng(southWest);\n    const ne = projection.fromDivPixelToLatLng(northEast);\n    return new google.maps.LatLngBounds(sw, ne);\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n    constructor({ maxZoom = 16 }) {\n        this.maxZoom = maxZoom;\n    }\n    /**\n     * Helper function to bypass clustering based upon some map state such as\n     * zoom, number of markers, etc.\n     *\n     * ```typescript\n     *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n     *    if (shouldBypassClustering(map)) {\n     *      return this.noop({markers})\n     *    }\n     * }\n     * ```\n     */\n    noop({ markers, }) {\n        return noop(markers);\n    }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { viewportPadding = 60 } = _a, options = __rest(_a, [\"viewportPadding\"]);\n        super(options);\n        this.viewportPadding = 60;\n        this.viewportPadding = viewportPadding;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed: false,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n}\n/**\n * @hidden\n */\nconst noop = (markers) => {\n    const clusters = markers.map((marker) => new Cluster({\n        position: MarkerUtils.getPosition(marker),\n        markers: [marker],\n    }));\n    return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxDistance = 40000, gridSize = 40 } = _a, options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n        super(options);\n        this.clusters = [];\n        this.state = { zoom: -1 };\n        this.maxDistance = maxDistance;\n        this.gridSize = gridSize;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        const state = { zoom: map.getZoom() };\n        let changed = false;\n        if (this.state.zoom >= this.maxZoom && state.zoom >= this.maxZoom) ;\n        else {\n            changed = !equal(this.state, state);\n        }\n        this.state = state;\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n    cluster({ markers, map, mapCanvasProjection, }) {\n        this.clusters = [];\n        markers.forEach((marker) => {\n            this.addToClosestCluster(marker, map, mapCanvasProjection);\n        });\n        return this.clusters;\n    }\n    addToClosestCluster(marker, map, projection) {\n        let maxDistance = this.maxDistance; // Some large number\n        let cluster = null;\n        for (let i = 0; i < this.clusters.length; i++) {\n            const candidate = this.clusters[i];\n            const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), MarkerUtils.getPosition(marker).toJSON());\n            if (distance < maxDistance) {\n                maxDistance = distance;\n                cluster = candidate;\n            }\n        }\n        if (cluster &&\n            extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(MarkerUtils.getPosition(marker))) {\n            cluster.push(marker);\n        }\n        else {\n            const cluster = new Cluster({ markers: [marker] });\n            this.clusters.push(cluster);\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var options = __rest(_a, []);\n        super(options);\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        return {\n            clusters: this.cluster({ markers, map, mapCanvasProjection }),\n            changed: false,\n        };\n    }\n    cluster(input) {\n        return this.noop(input);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\"]);\n        super({ maxZoom });\n        this.state = { zoom: -1 };\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n    }\n    calculate(input) {\n        let changed = false;\n        const state = { zoom: input.map.getZoom() };\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                const position = MarkerUtils.getPosition(marker);\n                const coordinates = [position.lng(), position.lat()];\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates,\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        if (!changed) {\n            if (this.state.zoom <= this.maxZoom || state.zoom <= this.maxZoom) {\n                changed = !equal(this.state, state);\n            }\n        }\n        this.state = state;\n        if (changed) {\n            this.clusters = this.cluster(input);\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map }) {\n        return this.superCluster\n            .getClusters([-180, -90, 180, 90], Math.round(map.getZoom()))\n            .map((feature) => this.transformCluster(feature));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: { lat, lng },\n            });\n        }\n        const marker = properties.marker;\n        return new Cluster({\n            markers: [marker],\n            position: MarkerUtils.getPosition(marker),\n        });\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterViewportAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60, viewportPadding = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\", \"viewportPadding\"]);\n        super({ maxZoom, viewportPadding });\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n        this.state = { zoom: -1, view: [0, 0, 0, 0] };\n    }\n    calculate(input) {\n        const state = {\n            zoom: Math.round(input.map.getZoom()),\n            view: getPaddedViewport(input.map.getBounds(), input.mapCanvasProjection, this.viewportPadding),\n        };\n        let changed = !equal(this.state, state);\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                const position = MarkerUtils.getPosition(marker);\n                const coordinates = [position.lng(), position.lat()];\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates,\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        if (changed) {\n            this.clusters = this.cluster(input);\n            this.state = state;\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map, mapCanvasProjection }) {\n        /* recalculate new state because we can't use the cached version. */\n        const state = {\n            zoom: Math.round(map.getZoom()),\n            view: getPaddedViewport(map.getBounds(), mapCanvasProjection, this.viewportPadding),\n        };\n        return this.superCluster\n            .getClusters(state.view, state.zoom)\n            .map((feature) => this.transformCluster(feature));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: { lat, lng },\n            });\n        }\n        const marker = properties.marker;\n        return new Cluster({\n            markers: [marker],\n            position: MarkerUtils.getPosition(marker),\n        });\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n    constructor(markers, clusters) {\n        this.markers = { sum: markers.length };\n        const clusterMarkerCounts = clusters.map((a) => a.count);\n        const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n        this.clusters = {\n            count: clusters.length,\n            markers: {\n                mean: clusterMarkerSum / clusters.length,\n                sum: clusterMarkerSum,\n                min: Math.min(...clusterMarkerCounts),\n                max: Math.max(...clusterMarkerCounts),\n            },\n        };\n    }\n}\nclass DefaultRenderer {\n    /**\n     * The default render function for the library used by {@link MarkerClusterer}.\n     *\n     * Currently set to use the following:\n     *\n     * ```typescript\n     * // change color if this cluster has more markers than the mean cluster\n     * const color =\n     *   count > Math.max(10, stats.clusters.markers.mean)\n     *     ? \"#ff0000\"\n     *     : \"#0000ff\";\n     *\n     * // create svg url with fill color\n     * const svg = window.btoa(`\n     * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n     * </svg>`);\n     *\n     * // create marker using svg icon\n     * return new google.maps.Marker({\n     *   position,\n     *   icon: {\n     *     url: `data:image/svg+xml;base64,${svg}`,\n     *     scaledSize: new google.maps.Size(45, 45),\n     *   },\n     *   label: {\n     *     text: String(count),\n     *     color: \"rgba(255,255,255,0.9)\",\n     *     fontSize: \"12px\",\n     *   },\n     *   // adjust zIndex to be above other markers\n     *   zIndex: 1000 + count,\n     * });\n     * ```\n     */\n    render({ count, position }, stats, map) {\n        // change color if this cluster has more markers than the mean cluster\n        const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n        // create svg literal with fill color\n        const svg = `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\" width=\"50\" height=\"50\">\n<circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n<text x=\"50%\" y=\"50%\" style=\"fill:#fff\" text-anchor=\"middle\" font-size=\"50\" dominant-baseline=\"middle\" font-family=\"roboto,arial,sans-serif\">${count}</text>\n</svg>`;\n        const title = `Cluster of ${count} markers`, \n        // adjust zIndex to be above other markers\n        zIndex = Number(google.maps.Marker.MAX_ZINDEX) + count;\n        if (MarkerUtils.isAdvancedMarkerAvailable(map)) {\n            // create cluster SVG element\n            const parser = new DOMParser();\n            const svgEl = parser.parseFromString(svg, \"image/svg+xml\").documentElement;\n            svgEl.setAttribute(\"transform\", \"translate(0 25)\");\n            const clusterOptions = {\n                map,\n                position,\n                zIndex,\n                title,\n                content: svgEl,\n            };\n            return new google.maps.marker.AdvancedMarkerElement(clusterOptions);\n        }\n        const clusterOptions = {\n            position,\n            zIndex,\n            title,\n            icon: {\n                url: `data:image/svg+xml;base64,${btoa(svg)}`,\n                anchor: new google.maps.Point(25, 25),\n            },\n        };\n        return new google.maps.Marker(clusterOptions);\n    }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line prefer-const\n    for (let property in type2.prototype) {\n        type1.prototype[property] = type2.prototype[property];\n    }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n    constructor() {\n        // MarkerClusterer implements google.maps.OverlayView interface. We use the\n        // extend function to extend MarkerClusterer with google.maps.OverlayView\n        // because it might not always be available when the code is defined so we\n        // look for it at the last possible moment. If it doesn't exist now then\n        // there is no point going ahead :)\n        extend(OverlayViewSafe, google.maps.OverlayView);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n    MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n    MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n    MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n    map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n    constructor({ map, markers = [], algorithmOptions = {}, algorithm = new SuperClusterAlgorithm(algorithmOptions), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler, }) {\n        super();\n        this.markers = [...markers];\n        this.clusters = [];\n        this.algorithm = algorithm;\n        this.renderer = renderer;\n        this.onClusterClick = onClusterClick;\n        if (map) {\n            this.setMap(map);\n        }\n    }\n    addMarker(marker, noDraw) {\n        if (this.markers.includes(marker)) {\n            return;\n        }\n        this.markers.push(marker);\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    addMarkers(markers, noDraw) {\n        markers.forEach((marker) => {\n            this.addMarker(marker, true);\n        });\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    removeMarker(marker, noDraw) {\n        const index = this.markers.indexOf(marker);\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        MarkerUtils.setMap(marker, null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        if (!noDraw) {\n            this.render();\n        }\n        return true;\n    }\n    removeMarkers(markers, noDraw) {\n        let removed = false;\n        markers.forEach((marker) => {\n            removed = this.removeMarker(marker, true) || removed;\n        });\n        if (removed && !noDraw) {\n            this.render();\n        }\n        return removed;\n    }\n    clearMarkers(noDraw) {\n        this.markers.length = 0;\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    /**\n     * Recalculates and draws all the marker clusters.\n     */\n    render() {\n        const map = this.getMap();\n        if (map instanceof google.maps.Map && map.getProjection()) {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n            const { clusters, changed } = this.algorithm.calculate({\n                markers: this.markers,\n                map,\n                mapCanvasProjection: this.getProjection(),\n            });\n            // Allow algorithms to return flag on whether the clusters/markers have changed.\n            if (changed || changed == undefined) {\n                // Accumulate the markers of the clusters composed of a single marker.\n                // Those clusters directly use the marker.\n                // Clusters with more than one markers use a group marker generated by a renderer.\n                const singleMarker = new Set();\n                for (const cluster of clusters) {\n                    if (cluster.markers.length == 1) {\n                        singleMarker.add(cluster.markers[0]);\n                    }\n                }\n                const groupMarkers = [];\n                // Iterate the clusters that are currently rendered.\n                for (const cluster of this.clusters) {\n                    if (cluster.marker == null) {\n                        continue;\n                    }\n                    if (cluster.markers.length == 1) {\n                        if (!singleMarker.has(cluster.marker)) {\n                            // The marker:\n                            // - was previously rendered because it is from a cluster with 1 marker,\n                            // - should no more be rendered as it is not in singleMarker.\n                            MarkerUtils.setMap(cluster.marker, null);\n                        }\n                    }\n                    else {\n                        // Delay the removal of old group markers to avoid flickering.\n                        groupMarkers.push(cluster.marker);\n                    }\n                }\n                this.clusters = clusters;\n                this.renderClusters();\n                // Delayed removal of the markers of the former groups.\n                requestAnimationFrame(() => groupMarkers.forEach((marker) => MarkerUtils.setMap(marker, null)));\n            }\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n        }\n    }\n    onAdd() {\n        this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n        this.render();\n    }\n    onRemove() {\n        google.maps.event.removeListener(this.idleListener);\n        this.reset();\n    }\n    reset() {\n        this.markers.forEach((marker) => MarkerUtils.setMap(marker, null));\n        this.clusters.forEach((cluster) => cluster.delete());\n        this.clusters = [];\n    }\n    renderClusters() {\n        // Generate stats to pass to renderers.\n        const stats = new ClusterStats(this.markers, this.clusters);\n        const map = this.getMap();\n        this.clusters.forEach((cluster) => {\n            if (cluster.markers.length === 1) {\n                cluster.marker = cluster.markers[0];\n            }\n            else {\n                // Generate the marker to represent the group.\n                cluster.marker = this.renderer.render(cluster, stats, map);\n                // Make sure all individual markers are removed from the map.\n                cluster.markers.forEach((marker) => MarkerUtils.setMap(marker, null));\n                if (this.onClusterClick) {\n                    cluster.marker.addListener(\"click\", \n                    /* istanbul ignore next */\n                    (event) => {\n                        google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n                        this.onClusterClick(event, cluster, map);\n                    });\n                }\n            }\n            MarkerUtils.setMap(cluster.marker, map);\n        });\n    }\n}\n\nexport { AbstractAlgorithm, AbstractViewportAlgorithm, Cluster, ClusterStats, DefaultRenderer, GridAlgorithm, MarkerClusterer, MarkerClustererEvents, MarkerUtils, NoopAlgorithm, SuperClusterAlgorithm, SuperClusterViewportAlgorithm, defaultOnClusterClickHandler, distanceBetweenPoints, extendBoundsToPaddedViewport, extendPixelBounds, filterMarkersToPaddedViewport, getPaddedViewport, noop, pixelBoundsToLatLngBounds };\n//# sourceMappingURL=index.esm.js.map\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport tinycolor from 'tinycolor2';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\n// all initialized Google maps\nvar m_maps = {};\n\n// all map data sets found on the page, as array for easy iteration\nvar m_mapData = [];\n\n// map styling\nvar m_mapStyle = [];\n\n// API key for accessing the map data\nvar m_apiKey;\n\n// the Google geocode object, used for resolving coordinates to address names\nvar m_googleGeocoder = null;\n\n// check if the API has already been loaded\nvar m_googleApiLoaded = false;\n\nfunction getPuempel(color) {\n\n    var shade = \"\" + tinycolor(color).darken(20);\n    return {\n        path: 'M0-37.06c-5.53 0-10 4.15-10 9.26 0 7.4 8 9.26 10 27.8 2-18.54 10-20.4 10-27.8 0-5.1-4.47-9.26-10-9.26zm.08 7a2.9 2.9 0 0 1 2.9 2.9 2.9 2.9 0 0 1-2.9 2.9 2.9 2.9 0 0 1-2.9-2.9 2.9 2.9 0 0 1 2.9-2.9z',\n        scale: 1,\n        fillOpacity: 1,\n        fillColor: color,\n        strokeColor: shade,\n        strokeWeight: 1\n    };\n}\n\nfunction getFeatureGraphic() {\n\n    const color = Mercury.getThemeJSON(\"map-color[0]\", \"#ffffff\");\n    return getPuempel(color);\n}\n\nfunction getCenterPointGraphic() {\n\n    const color1 = Mercury.getThemeJSON(\"map-center\", \"#000000\");\n    const color2 = tinycolor(color1).darken(20);\n    return {\n        path: \"M2,8a6,6 0 1,0 12,0a6,6 0 1,0 -12,0\",\n        scale: 1,\n        fillColor: color1.toString(),\n        fillOpacity: 1,\n        strokeWeight: 1,\n        strokeColor: color2.toString(),\n        strokeOpacity: 1\n    }\n}\n\nfunction getClusterGraphic() {\n\n    return {\n        render: function({count, position}, stats) {\n            const color = Mercury.getThemeJSON(\"map-cluster\", \"#999999\");\n            const perceivedColor = tinycolor(color);\n            const strokeColor = tinycolor(color).darken(20);\n            const textColor = perceivedColor.isLight() ? tinycolor(color).darken(70) : tinycolor(color).lighten(70);\n            const svg = window.btoa(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\"><circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"${strokeColor}\" stroke-width=\"2\" fill=\"${color}\"/></svg>`);\n            return new google.maps.Marker({\n                position,\n                icon: {\n                    url: `data:image/svg+xml;base64,${svg}`,\n                    scaledSize: new google.maps.Size(60, 60)\n                },\n                label: {\n                    text: String(count),\n                    color: textColor.toString(),\n                    fontSize: \"14px\",\n                    fontWeight: \"normal\"\n                },\n                zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,\n            });\n        }\n    }\n}\n\nfunction showInfo(mapId, infoId) {\n\n    if (DEBUG) console.info(\"GoogleMap showInfo() called with map id: \" + mapId + \" info id: \" + infoId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        if (i != infoId) {\n            infoWindows[i].close();\n        } else {\n            if (infoWindows[i].geocode == \"true\") {\n                if (DEBUG) console.info(\"showInfo() geocode lookup for \" + mapId);\n                getGeocode(infoWindows[i]);\n                infoWindows[i].geocode = \"false\";\n            }\n            infoWindows[i].open(\n                map,\n                infoWindows[i].marker\n            );\n        }\n    }\n}\n\nfunction hideAllInfo(mapId) {\n\n    if (DEBUG) console.info(\"GoogleMap hideAllInfo() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        infoWindows[i].close();\n    }\n}\n\nfunction setInfo(results, status, infoWindow) {\n\n    if (DEBUG) console.info(\"GoogleMap setInfo() geocode lookup returned status \" + status);\n    var addressFound = \"\";\n    if (status == google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n            addressFound = formatGeocode(results[0]);\n        }\n    } else {\n        console.warn(\"GoogleMap GeoCoder returned error status '\" + status + \"' for coordinates \" + infoWindow.marker.position);\n    }\n    // replace content in info window\n    var infoContent = infoWindow.getContent();\n    infoContent = infoContent.replace(\"<div class='geoAdr'></div>\", addressFound);\n    infoWindow.setContent(infoContent);\n}\n\nfunction formatGeocode(result) {\n\n    // returns the address from a geocode result in nicely formatted way\n    var street = \"\";\n    var strNum = \"\";\n    var zip = \"\";\n    var city = \"\";\n    var foundAdr = false;\n\n    for (var i = 0; i < result.address_components.length; i++) {\n        var t = String(result.address_components[i].types);\n        if (street == \"\" && t.indexOf(\"route\") != -1) {\n            street = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"street_number\") != -1) {\n            strNum = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"postal_code\") != -1) {\n            zip = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (city == \"\" && t.indexOf(\"locality\") != -1) {\n            city = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n    }\n    if (foundAdr == true) {\n        return street + \" \" + strNum + \"<br/>\" + zip + \" \" + city;\n    } else {\n        return result.formatted_address;\n    }\n}\n\nfunction getGeocode(infoWindow) {\n\n    if (m_googleGeocoder == null) {\n        // initialize global geocoder object if required\n        m_googleGeocoder = new google.maps.Geocoder();\n    }\n\n    m_googleGeocoder.geocode({'latLng': infoWindow.marker.position}, function(results, status) {\n        setInfo(results, status, infoWindow);\n    });\n}\n\nfunction loadGoogleApi() {\n\n    if (!m_googleApiLoaded) {\n        var locale = Mercury.getInfo(\"locale\");\n        var mapKey = \"\"\n        if (m_apiKey != null) {\n            mapKey = \"&key=\" + m_apiKey;\n        }\n        var addLibs = \"\";\n        if (! Mercury.isOnlineProject()) {\n            // need to load places API for OpenCms map editor\n            addLibs = \"&libraries=places\"\n        }\n        if (DEBUG) console.info(\"GoogleMap API key: \" + (mapKey == '' ? '(undefined)' : mapKey));\n        let response = jQ.loadScript(\"https://maps.google.com/maps/api/js?callback=GoogleMap.initGoogleMaps&language=\" + locale + addLibs + mapKey, {}, DEBUG);\n        m_googleApiLoaded = true;\n        return response;\n    } else {\n        initGoogleMaps();\n    }\n}\n\n/****** Exported functions ******/\n\nexport function showMarkers(mapId, group) {\n\n    if (DEBUG) console.info(\"GoogleMap showMapMarkers() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    let mapData;\n    for (let md of m_mapData) {\n        if (md.id === mapId) {\n            mapData = md;\n        }\n    }\n    if (map) {\n        if (!mapData.markerCluster) {\n            var markers = map.markers;\n            var g = decodeURIComponent(group);\n            hideAllInfo(mapId);\n            for (var i = 0; i < markers.length; i++) {\n                if (markers[i].group == g || g == 'showall') {\n                    markers[i].setVisible(true);\n                } else {\n                    markers[i].setVisible(false);\n                }\n            }\n        } else {\n            hideAllInfo(mapId);\n            showSingleMap(mapData, group);\n        }\n    }\n}\n\nfunction showSingleMap(mapData, filterByGroup){\n\n    var mapId = mapData.id;\n\n    if (DEBUG) console.info(\"GoogleMap initializing map: \" + mapId);\n    var mapOptions = {\n        zoom: parseInt(mapData.zoom),\n        styles: m_mapStyle,\n        scrollwheel: false,\n        mapTypeId: eval(\"google.maps.MapTypeId.\" + mapData.type),\n        streetViewControl: false,\n        mapTypeControlOptions: {\n            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n            mapTypeIds: new Array(\n                google.maps.MapTypeId.ROADMAP,\n                google.maps.MapTypeId.SATELLITE,\n                google.maps.MapTypeId.HYBRID,\n                google.maps.MapTypeId.TERRAIN\n            )\n        },\n        center: new google.maps.LatLng(mapData.centerLat, mapData.centerLng),\n        maxZoom: 18\n    }\n\n    var $typeParent = jQ(\"#\" + mapData.id).closest(\"*[class*='type-map']\");\n    $typeParent.addClass(\"visible\");\n\n    // create the map\n    var map = new google.maps.Map(document.getElementById(mapId), mapOptions);\n\n    // enable mouse wheel scrolling after click\n    google.maps.event.addListener(map, 'click', function(event){\n        this.setOptions({scrollwheel:true});\n    });\n\n    // map markers and info windows\n    var markers = [];\n    var infoWindows = [];\n    var groups = {};\n    var groupsFound = 0;\n\n    if (typeof mapData.markers !== \"undefined\") {\n        let idx = 0;\n        for (var p=0; p < mapData.markers.length; p++) {\n            var point = mapData.markers[p];\n            var group = point.group;\n            if (group === \"centerpoint\") {\n                if (DEBUG) console.info(\"GoogleMap new center point added.\");\n                groups[group] = getCenterPointGraphic();\n            } else if (typeof groups[group] === \"undefined\" ) {\n                // Array? Object?\n                // see http://stackoverflow.com/questions/9526860/why-does-a-string-index-in-a-javascript-array-not-increase-the-length-size\n                var color = Mercury.getThemeJSON(\"map-color[\" + groupsFound++ + \"]\", \"#ffffff\");\n                if (DEBUG) console.info(\"GoogleMap new marker group added: \" + group + \" with color: \" + color);\n                groups[group] = getPuempel(color);\n            }\n            if (!mapData.markerCluster || filterByGroup === undefined || filterByGroup == \"showall\" || decodeURIComponent(filterByGroup) == group) {\n                // get marker data from calling object\n                var marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(point.lat, point.lng),\n                    map: map,\n                    title: point.title,\n                    group: group,\n                    icon: groups[group],\n                    info: point.info,\n                    index: idx,\n                    mapId: mapId,\n                    geocode: point.geocode\n                });\n    \n                // add marker to marker map\n                markers.push(marker);\n    \n                // initialize info window\n                var infoWindow = new google.maps.InfoWindow({\n                    content: marker.info,\n                    marker: marker,\n                    geocode: point.geocode,\n                    index: idx\n                });\n    \n                // add marker to marker map\n                infoWindows.push(infoWindow);\n    \n                if (DEBUG) console.info(\"GoogleMap attaching Event lister: \" + p + \" to map id \" + mapId);\n    \n                // attach event listener that shows info window to marker\n                // see http://you.arenot.me/2010/06/29/google-maps-api-v3-0-multiple-markers-multiple-infowindows/\n                if (group !== \"centerpoint\") {\n                    marker.addListener('click', function() {\n                        showInfo(this.mapId, this.index);\n                    });\n                }\n                idx++;\n            }\n        }\n    }\n    if (mapData.markerCluster) {\n        new MarkerClusterer({markers: markers, map: map, renderer: getClusterGraphic()});\n    }\n    // store map in global array, required e.g. to select marker groups etc.\n    var map = {\n        'id': mapId,\n        'map': map,\n        'markers': markers,\n        'infoWindows': infoWindows\n    };\n    m_maps[mapId] = map;\n}\n\n/**\n * Loads and displays a GeoJSON file.\n */\nexport function showGeoJson(mapId, geoJson, ajaxUrlMarkersInfo) {\n\n    if (DEBUG) console.info(\"Google update markers for map with id: \" + mapId);\n    let map;\n    try {\n        map = m_maps[mapId].map;\n    } catch (e) {\n        // map data may already be loaded but not the map\n    }\n    if (!map) { // no cookie consent yet\n        return;\n    }\n    const features = geoJson.features || [];\n    const markers = [];\n    const boundsNorthEast = {lat: null, lng: null};\n    const boundSouthWest = {lat: null, lng: null};\n    let checkBounds = function(coordinates) {\n        let lat = coordinates[1];\n        let lng = coordinates[0];\n        if (boundsNorthEast.lat === null || boundsNorthEast.lat < lat) {\n            boundsNorthEast.lat = lat;\n        }\n        if (boundsNorthEast.lng === null || boundsNorthEast.lng < lng) {\n            boundsNorthEast.lng = lng;\n        }\n        if (boundSouthWest.lat === null || boundSouthWest.lat > lat) {\n            boundSouthWest.lat = lat;\n        }\n        if (boundSouthWest.lng === null || boundSouthWest.lng > lng) {\n            boundSouthWest.lng = lng;\n        }\n    }\n    let centerPoint;\n    for (let md of m_mapData) {\n        if (md.id === mapId && md.markers && md.markers.length > 0) {\n            centerPoint = md;\n        }\n    }\n    if (centerPoint) {\n        checkBounds([map.getCenter().lng(), map.getCenter().lat()]); // bounding box includes the center point\n    }\n    for (let i = 0; i < features.length; i++) {\n        const feature = features[i];\n        const coordinates = feature.geometry.coordinates;\n        const infoCoordinates = feature.properties.coords;\n        checkBounds(coordinates);\n        const marker = new google.maps.Marker({\n            position: new google.maps.LatLng(coordinates[1], coordinates[0]),\n            map: map,\n            icon: getFeatureGraphic(),\n            zIndex: i\n        });\n        markers.push(marker);\n        const infoWindow = new google.maps.InfoWindow({\n            marker: marker,\n            zIndex: i\n        });\n        marker.addListener(\"click\", function(event) {\n            if (m_maps[mapId].infoWindow) {\n                m_maps[mapId].infoWindow.close();\n            }\n            const ajaxUrl = ajaxUrlMarkersInfo + \"&coordinates=\" + infoCoordinates;\n            fetch(ajaxUrl)\n                .then(response => response.text())\n                .then(data => {\n                    infoWindow.setContent(data);\n                    infoWindow.open(map, marker);\n                });\n            m_maps[mapId].infoWindow = infoWindow;\n        });\n    }\n    new MarkerClusterer({markers: markers, map: map, renderer: getClusterGraphic()});\n    if (boundsNorthEast.lat) { // catch no center point and no features\n        const bounds = new google.maps.LatLngBounds();\n        bounds.extend(boundsNorthEast);\n        bounds.extend(boundSouthWest);\n        map.fitBounds(bounds);\n    }\n}\n\nexport function initGoogleMaps() {\n\n    if (DEBUG) console.info(\"GoogleMap initGoogleMaps() called with data for \" + m_mapData.length + \" maps!\" );\n       for (var i=0; i < m_mapData.length; i++) {\n         if(!m_mapData[i].showPlaceholder){\n             showSingleMap(m_mapData[i]);\n          }\n       }\n}\n\nfunction showMap(event){\n\n    // called by click on hidden map element in edit mode\n    if (DEBUG) {console.log(\"GoogleMap show map with id: \" + event.currentTarget.id);}\n    var mapToShow= event.currentTarget;\n\n    for(var i=0; i<m_mapData.length;i++){\n        if(m_mapData[i].id == mapToShow.id){\n            m_mapData[i].showPlaceholder=false;\n            showSingleMap(m_mapData[i]);\n        }\n    }\n}\n\n/****** Exported functions ******/\n\nexport function init(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    m_apiKey = Mercury.getInfo(\"googleApiKey\");\n\n    if (DEBUG) {\n        console.info(\"GoogleMap.init()\");\n        if (m_apiKey != null) {\n            // Goggle map key is read in mercury:pageinfo tag and read to JavaScript via Mercury.init()\n            console.info(\"GoogleMap API key is: \" + Mercury.getInfo(\"googleApiKey\"));\n        } else {\n            console.info(\"GoogleMap API key not set - Google maps not activated\");\n        }\n    }\n\n    var $mapElements = jQ('.map-google .mapwindow');\n    if (DEBUG) console.info(\"GoogleMap.init() .map-google elements found: \" + $mapElements.length);\n\n    if ($mapElements.length > 0) {\n\n        if (m_apiKey != null) {\n\n            if (PrivacyPolicy.cookiesAcceptedExternal()) {\n\n                // initialize map style from JSON stored in CSS\n                m_mapStyle = Mercury.getThemeJSON(\"map-style\", []);\n\n                // initialize map sections with values from data attributes\n                $mapElements.each(function(){\n                    var $mapElement = jQ(this);\n\n                    if (typeof $mapElement.data(\"map\") !== \"undefined\") {\n                        var mapData = $mapElement.data(\"map\");\n                        if(typeof mapData === \"string\") {\n                            mapData = JSON.parse(mapData);\n                        }\n                        mapData.id = $mapElement.attr(\"id\");\n                        mapData.showPlaceholder = Mercury.initPlaceholder($mapElement, showMap);\n                        if (DEBUG) console.info(\"GoogleMap found with id: \" + mapData.id);\n                        m_mapData.push(mapData);\n                        if (! mapData.showPlaceholder) {\n                            $mapElement.removeClass('placeholder');\n                        }\n                    }\n                });\n\n                // load the Google map API\n                return loadGoogleApi();\n\n            } else {\n                if (DEBUG) console.info(\"External cookies not accepted by the user - Google maps are disabled!\");\n            }\n\n        }\n    }\n}\n"],"names":["ARRAY_TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","KDBush","from","data","ArrayBuffer","Error","magic","versionAndType","version","ArrayType","nodeSize","numItems","constructor","isNaN","this","Math","min","max","IndexArrayType","arrayTypeIndex","indexOf","coordsByteSize","BYTES_PER_ELEMENT","idsByteSize","padCoords","ids","coords","_pos","_finished","set","add","x","y","index","finish","numAdded","sort","range","minX","minY","maxX","maxY","stack","length","result","axis","pop","right","left","i","push","m","within","qx","qy","r","r2","sqDist","k","n","z","log","s","exp","sd","sqrt","floor","t","j","swapItem","swap","arr","tmp","ax","ay","bx","by","dx","dy","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","generateId","reduce","map","props","fround","OFFSET_ID","OFFSET_NUM","OFFSET_PROP","Supercluster","options","Object","assign","create","trees","Array","stride","clusterProps","load","points","console","time","timerId","p","geometry","lng","lat","coordinates","lngX","latY","Infinity","tree","_createTree","timeEnd","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","maxLng","maxLat","easternHem","westernHem","concat","_limitZoom","clusters","id","getClusterJSON","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","pow","children","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","f","type","round","undefined","nextData","neighborIds","numPointsOrigin","numPoints","neighborId","clusterProperties","wx","wy","clusterPropIndex","numPoints2","_map","clone","original","yLat","count","abbrev","propIndex","point_count_abbreviated","sin","PI","y2","atan","__rest","e","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","MarkerUtils","isAdvancedMarkerAvailable","google","maps","marker","getMapCapabilities","isAdvancedMarkersAvailable","isAdvancedMarker","AdvancedMarkerElement","setMap","getPosition","position","LatLng","getVisible","Cluster","markers","_position","bounds","LatLngBounds","extend","getCenter","filter","AbstractAlgorithm","noop","SuperClusterAlgorithm","_a","super","state","superCluster","calculate","input","changed","getZoom","feature","transformCluster","leaf","ClusterStats","sum","clusterMarkerCounts","a","clusterMarkerSum","b","mean","DefaultRenderer","render","stats","svg","title","zIndex","Number","Marker","MAX_ZINDEX","svgEl","DOMParser","parseFromString","documentElement","setAttribute","clusterOptions","content","icon","url","btoa","anchor","Point","OverlayViewSafe","type1","type2","property","OverlayView","MarkerClustererEvents","defaultOnClusterClickHandler","_","fitBounds","MarkerClusterer","algorithmOptions","algorithm","renderer","onClusterClick","addMarker","noDraw","includes","addMarkers","forEach","removeMarker","splice","removeMarkers","removed","clearMarkers","getMap","Map","getProjection","event","trigger","CLUSTERING_BEGIN","mapCanvasProjection","singleMarker","Set","groupMarkers","has","renderClusters","requestAnimationFrame","CLUSTERING_END","onAdd","idleListener","addListener","bind","onRemove","removeListener","reset","delete","CLUSTER_CLICK","module","exports","equal","keys","isArray","RegExp","source","flags","valueOf","toString","key","jQ","DEBUG","m_maps","m_mapData","m_mapStyle","m_apiKey","m_googleGeocoder","m_googleApiLoaded","getPuempel","color","path","scale","fillOpacity","fillColor","strokeColor","darken","strokeWeight","getFeatureGraphic","Mercury","getThemeJSON","getCenterPointGraphic","color1","color2","strokeOpacity","getClusterGraphic","perceivedColor","textColor","isLight","lighten","window","scaledSize","Size","label","text","String","fontSize","fontWeight","showInfo","mapId","infoId","info","infoWindows","close","geocode","getGeocode","open","hideAllInfo","setInfo","results","status","infoWindow","addressFound","GeocoderStatus","OK","formatGeocode","warn","infoContent","getContent","replace","setContent","street","strNum","zip","city","foundAdr","address_components","types","long_name","formatted_address","Geocoder","loadGoogleApi","locale","getInfo","mapKey","addLibs","isOnlineProject","response","loadScript","initGoogleMaps","showMarkers","group","mapData","md","markerCluster","showSingleMap","g","decodeURIComponent","setVisible","filterByGroup","mapOptions","parseInt","styles","scrollwheel","mapTypeId","eval","streetViewControl","mapTypeControlOptions","style","MapTypeControlStyle","DROPDOWN_MENU","mapTypeIds","MapTypeId","ROADMAP","SATELLITE","HYBRID","TERRAIN","center","centerLat","centerLng","$typeParent","closest","addClass","document","getElementById","setOptions","groups","groupsFound","idx","point","InfoWindow","showGeoJson","geoJson","ajaxUrlMarkersInfo","boundsNorthEast","boundSouthWest","centerPoint","checkBounds","infoCoordinates","fetch","then","showPlaceholder","showMap","currentTarget","mapToShow","init","jQuery","debug","$mapElements","PrivacyPolicy","cookiesAcceptedExternal","each","$mapElement","JSON","parse","attr","initPlaceholder","removeClass"],"sourceRoot":""}