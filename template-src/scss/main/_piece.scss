// This program is part of the OpenCms Mercury Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file: _piece.scss
 */

// Possible piece grid variations, as used by the element settings:
//
//  0. Heading, Image, Text, Link (all full)
//  1. Image, Heading, Text, Link (all full)
//  2. Heading on top, Image left, Text and Link right (separate column)
//  3. Heading on top, Image right, Text and Link left (separate column)
//  4. Heading on top, Image left, Text and Link right (floating around image)
//  5. Heading on top, Image right, Text and Link left (floating around image)
//  6. Image left, Heading, Text and Link right (separate column)
//  7. Image right, Heading, Text and Link left (separate column)
//  8. Image left, Heading, Text and Link right (floating around image)
//  9. Image right, Heading, Text and Link left (floating around image)
// 10. Heading, Text, Link, Image (all full)
//
// 50. Title as image overlay (Detail page only)
// 99. Default value for content section - treated internally as '4' (Content section only)

@use 'sass:math';

@function get-col-float-size($cols) {
    // this is no longer used by piece, but still used somewhere else e.g. in search.scss
    @if ($cols < 12) {
        @return calc(
            (var(--#{$prefix}piece-width) + var(--#{$prefix}gutter-x))
            * #{math.div($cols, $grid-columns)}
            - var(--#{$prefix}gutter-x)
        );
    } @else {
        @return var(--#{$prefix}piece-width);
    }
}

@function get-col-size-var($cols, $reduce: 0) {
    @if ($cols < 12) {
        @return calc(
            (var(--#{$prefix}piece-width) + var(--#{$prefix}gutter-x))
            * #{math.div($cols, $grid-columns)}
            - (var(--#{$prefix}gutter-factor) * var(--#{$prefix}gutter-x)#{if($reduce > 0, ' + ', '')}#{if($reduce > 0, $reduce, '')})
        );
    } @else {
        @return 100%;
    }
}

$piece-cols:   (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) !default; // supported column sizes for the piece visual

.piece {
    --#{$prefix}gutter-x: #{$piece-gutter-x};
    --#{$prefix}gutter-factor: 1;
    --#{$prefix}visual-last-margin-top: #{$piece-visual-last-margin-top};
    --#{$prefix}visual-margin-bottom: #{$piece-visual-margin-bottom};
    --#{$prefix}text-to-link-margin: #{$piece-text-to-link-margin};
    --#{$prefix}piece-headings-margin-bottom: #{$piece-headings-margin-bottom};
    --#{$prefix}intro-headings-margin-bottom: #{$intro-headings-margin-bottom};
    --#{$prefix}piece-width: 100%;
    --#{$prefix}piece-visual-size: var(--#{$prefix}piece-width);
    --#{$prefix}piece-body-size: var(--#{$prefix}piece-width);

    display: block;
    position: relative;

    > .visual {
        margin-bottom: var(--#{$prefix}visual-margin-bottom);
        width: 100%;

        @include copyright-subtitle;

        > a {
            display: block;
        }
    }

    &.disabled {
        background-image: $disabled-bg;
    }

    &.full {
        // center visual in case the full width is not used
        > .visual {
            margin-left: auto;
            margin-right: auto;
        }

        &.align-right {
            > .visual {
                margin-right: 0;
            }
        }
    }

    &.only-visual {
        > .visual {
            margin-bottom: 0;
        }
    }

    &.pvl {
        // (p)iece (v)isual (l)ast - however, there still may be a link behind the visual
        > .visual {
            margin-bottom: 0;
            + .link {
                 margin-top: var(--#{$prefix}visual-last-margin-top);
            }
        }
        > .body,
        > .link {
            + .visual {
                 margin-top: var(--#{$prefix}visual-last-margin-top);
            }
        }
    }

    &.paj {
        // (p)iece (a)lign (j)ustify
        .heading > .piece-heading,
        > .visual > .subtitle,
        > .body + .link,
        > .body .link,
        > .body .text {
            text-align: justify;
        }
    }

    &.pac {
        // (p)iece (a)lign (c)entered
        .heading > .piece-heading,
        > .visual > .subtitle,
        > .body + .link,
        > .body .link,
        > .body .text {
            text-align: center;
        }
    }

    &.par {
        // (p)iece (a)lign (r)ight
        .heading > .piece-heading,
        .heading > .piece-heading-link,
        > .visual > .subtitle,
        > .body + .link,
        > .body .link,
        > .body .text {
            text-align: right;
        }
    }

    &.pmv {
        // (p)iece (m)inimum (v)isual - set width to 32px for icons
        > .visual {
            min-width: 32px;
        }
    }

    .heading {
        @include use-hyphens-headings;

        > .piece-heading {
            text-overflow: ellipsis;
            overflow: hidden;
        }
        > .piece-heading-link {
            display: block;
            &:hover {
                text-decoration: none;
            }
        }
        &:last-child {
            // if the heading is the last child of the piece, don't add the bottom margin
            > .piece-heading-link > .piece-heading,
            > .piece-heading {
                margin-bottom: 0;
            }
        }
    }

    .piece-heading {
        margin-bottom: var(--#{$prefix}headings-margin-bottom);
    }

    > .body {
        .text {
            @include use-hyphens-text;

            > .detail-content > *,
            > * {
                // add margins for all elements in text piece
                margin-bottom: var(--#{$prefix}paragraph-margin-bottom);
                &:last-child {
                    // last element in text must not add margin
                    margin-bottom: 0;
                }
            }

            h1, h2, h3, h4, h5, h6 {
                margin-bottom: var(--#{$prefix}piece-headings-margin-bottom);
            }
        }
        + .link, // link may also be a sibling to the body
        .text + .link {
            // add margin between body / text and link
            margin-top: var(--#{$prefix}text-to-link-margin);
        }
    }

    // special adjustments for type-section content pieces that re not "boxed"
    // NOTE: This is NOT done for 'paragraph' because contents with multiple paragraphs are not used like sections to create text pages
    &.element.type-section:not(.box) {
        // margin adjustments
        &.only-heading {
            // if piece element has only a header, set margin the same height as normally used by the headers
            margin-bottom: var(--#{$prefix}headings-margin-bottom);
        }

        &.only-text,
        &.phb:not(.pnm) {

            // if a piece element that starts with text follows a text-only piece element, reduce top margin
            // goal: make text from 2nd element apperar as if it belongs to first element
            +.piece.element.type-section:not(.box) {
                &.only-text,
                &.pnh {
                    margin-top: calc(var(--#{$prefix}paragraph-margin-bottom) - var(--#{$prefix}element-margin));
                }
            }
        }
    }

     // special adjustments for paragraphs or type-section content pieces
     &.paragraph,
     &.element.type-section {
        @if ($piece-btn-white-space == normal) {
            // buttons in sections that break long text
            .btn {
                white-space: normal;
                hyphens: auto;
                overflow-wrap: anywhere;
                word-break: break-word;
                text-align: left;

                &.btn-block {
                    text-align: center;
                }
            }
        }

        @if ($piece-text-link-decoration != $link-decoration) {
            // links may be underlined different in section piece
            .text a:not(.btn) {
                text-decoration: $piece-text-link-decoration;
                &:hover {
                    text-decoration: $piece-text-link-hover-decoration
                }
            }
        }
    }

    > .visual {
        width: var( --#{$prefix}piece-visual-size);
    }

    @include media-breakpoint-down($piece-desktop-breakpoint) {

        @each  $piece-col-size in $piece-cols {
            // generate size variations for the mobile visual column
            &.p-xs-#{""+$piece-col-size} {
                --#{$prefix}piece-visual-size: #{get-col-size-var($piece-col-size)};
            }
        }

        &.p-xs-0 {
            // visual is hidden in xs, sm, but visible from md
            > .visual {
                display: none;
            }
        }
    }
}

html.keyboard-nav .piece {
    .heading {
        > .piece-heading {
            // must show overflow or the border may be hidden
            overflow: visible;
        }
    }
}

.flex-col {
    // .flex-col makes single columns in a row use the complete available height
    > .piece.flex {
        flex-grow: 1;
    }
    > .piece.full,
    > .type-contact.box,
    > .pivot.box {
        &:only-child {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
    }
}

@include media-breakpoint-up($piece-desktop-breakpoint) {

    .piece {

        &.full.only-visual,
        &.phv {
            // required for floating layouts, for example the detail page key visual
            // this makes sure a piece with an image will NOT float around a previous key visual image aligned left or right
            @include clearfix-before;
        }

        &.flex {
            --#{$prefix}gutter-factor: 0.5;

            display: flex;
            flex-wrap: wrap;
            flex-direction: row;

            >.heading,
            >.link {
                // @include make-piece-col(12);
                flex: auto;
            }

            > .heading,
            > .link,
            > .visual,
            > .body {
                position: relative;
                width: 100%;
            }
            > .visual {
                // in flex grid there must be no bottom margin below the visual
                margin-bottom: 0;
                flex: 0 0 var(--#{$prefix}piece-visual-size);
            }
            > .body {
                flex: 0 0 var(--#{$prefix}piece-body-size);
            }

            &.right {
                > .visual {
                    order: 13;
                    padding-left: calc(var(--#{$prefix}gutter-factor) * var(--#{$prefix}gutter-x));
                }
                > .body {
                    padding-right: calc(var(--#{$prefix}gutter-factor) * var(--#{$prefix}gutter-x));
                }
            }
            &.left {
                > .visual {
                    padding-right: calc(var(--#{$prefix}gutter-factor) * var(--#{$prefix}gutter-x));
                }
                > .body {
                    padding-left: calc(var(--#{$prefix}gutter-factor) * var(--#{$prefix}gutter-x));
                }
            }

            &.p-md-7,
            &.p-md-8,
            &.p-md-9,
            &.p-md-10,
            &.p-md-11 {
                // if available room for text is very small, adjust wrap settings
                .btn {
                    white-space: normal;
                }
            }
        }


        &.float {
            &.left {
                > .visual {
                    float: left;
                    margin-right: var(--#{$prefix}gutter-x);
                }
                > .body ul {
                    display: flex;
                    flex-direction: column;
                }
            }

            &.right {
                > .visual {
                    float: right;
                    margin-left: var(--#{$prefix}gutter-x);
                }
            }
        }

        @each $piece-col-size in $piece-cols {
            // generate size variations for the visual column
            &.p-md-#{""+$piece-col-size} {
                --#{$prefix}piece-visual-size: #{get-col-size-var($piece-col-size)};
                // --#{$prefix}piece-body-size: #{get-col-size-var($grid-columns - $piece-col-size, 1px)};
                --#{$prefix}piece-body-size: calc(var(--#{$prefix}piece-width) - var(--#{$prefix}piece-visual-size) - 1px);
            }
        }

        &.p-md-0 {
            // visual is hidden from md, but visible in xs, sm
            > .visual {
                display: none;
            }
            &.flex > .body {
                flex: auto;
            }
        }
    }
}

.intro-headline {
    // formatting for headings with intro
    > span {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    > .intro {
        line-height: 1.25;
        font-size: 65%;
        font-weight: $font-weight-intro-headings;
        color: var(--#{$prefix}intro-headings-color);
        margin-bottom: var(--#{$prefix}intro-headings-margin-bottom);
    }
}

a .intro-headline {
    // decoration does not look good for intro, however must set on parent which is the hx element
    text-decoration: none;
    > .headline {
        text-decoration: $linked-headings-decoration;
    }
    &:hover {
        text-decoration: none;
        > .headline {
            text-decoration: $linked-headings-hover-decoration;
        }
    }
}

// element text that should display like piece text (use for text inserted from editor)
//// only known usage: newsletterconfig-detail-formatter.jsp
.element {
    .body-text {
        > * {
            // add margins for all elements in text piece
            margin-bottom: var(--#{$prefix}paragraph-margin-bottom);
            &:last-child {
                // last element in text must not add margin
                margin-bottom: 0;
            }
        }
        @include use-hyphens-text;
    }
}