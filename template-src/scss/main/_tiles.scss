// This program is part of the OpenCms Mercury Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file:_tiles.scss
 */

$ti-maxCols:    12 !default;
$ti-margin:     0 !default;

//                2       3       4       6
$ti-cols:       ((8, 8), (6, 6), (4, 4), (3, 3), (2,2)) !default;

$sq-margin:     0 !default;
$sq-margins:    (0, 1, 2, 5, 10, 15, 20) !default;
$sq-padding:    20 !default;

$square-spacing:                $default-margin !default;
$square-text-overlay-padding-v: calc(0.5 * $square-spacing) !default;
$square-text-overlay-padding-h: $square-spacing !default;
$square-paragraph-margin:       calc(0.5 * $paragraph-margin-bottom) !default;

$square-overlay-h1-size:        2.0rem !default;
$square-overlay-h2-size:        1.6rem !default;
$square-overlay-h3-size:        1.2rem !default;
$square-overlay-h4-size:        $square-overlay-h3-size !default;
$square-overlay-text-size:      1.2rem !default;
$square-overlay-line-height:    1.2 !default;

$square-overlay-bg-color:       #000 !default;
$square-overlay-bg-opacity:     0.65 !default;
$square-overlay-boxbg-opacity:  0.75 !default;

$square-overlay-bg-color-xs:    #272727 !default;
$square-overlay-text-color:     $white !default;
$square-overlay-text-shadow:    1px 1px 1px #000 !default;

$tile-overlay-bg-color:         rgba(0, 0, 0, 0.3) !default;
$tile-overlay-text-color:       $square-overlay-text-color !default;
$tile-overlay-text-shadow:      $square-overlay-text-shadow !default;

// 75 required by list download display formatter
// 125, 150 required by list calendar sheet
$fix-cols:      (75, 125, 150) !default;

// supported square col sizes
$sq-cols-sizes:    (12, 9, 8, 6, 4, 3, 2) !default;

//                1/6            1/4           1/3           1/2          1.5           2
// $sq-heights: ((0o16, 0.166), (0o25, 0.25), (0o33, 0.332), (0o5, 0.5), (1o5, 1.499), (2, 2)) !default;
// different square heights are deactivated by default
$sq-heights-xs:    () !default;
$sq-heights-sm:    () !default;
$sq-heights-md:    () !default;
$sq-heights-lg:    () !default;
$sq-heights-xl:    () !default;

@function get-square-heights($size) {
    @if ($size =="xs") {
        @return $sq-heights-xs;
    } @else if ($size =="sm") {
        @return $sq-heights-sm;
    } @else if ($size =="md") {
        @return $sq-heights-md;
    } @else if ($size =="lg") {
        @return $sq-heights-lg;
    } @else {
        @return $sq-heights-xl;
    }
}

// creates a fixed width column
@mixin make-fixcol($size)   {
    @each $i in $fix-cols {
        $fixsize: ($i + $grid-gutter-width);
        // the fixed with column
        .fixcol-#{$size}-#{$i} {
            // add the gutter so that the column pixel size is what the class says
            width: $fixsize;
            max-width: $fixsize;
            flex: 0 0 $fixsize;
        }
        // if fixed size ($i) is 0 we use the default 100%, otherwise the gutter would be subtracted
        @if ($i > 0) {
            // the rest of the column
            .fixcol-#{$size}-#{$i}-rest {
                width: calc(100% - #{$fixsize});
                max-width: calc(100% - #{$fixsize});
                flex: 0 0 calc(100% - #{$fixsize});
            }
        }
    }
}
@function calc-square-height($cols) {
    @return calc(
        (100% - 2 * var(--#{$prefix}sq-margin)) * divide($cols, 12, $divide-precision) * var(--#{$prefix}sq-ratio)
        + 2 * divide($cols, 12, $divide-precision) * var(--#{$prefix}sq-ratio) * var(--#{$prefix}sq-margin)
    );
}

@mixin make-square-col($size)   {

    @each $col-size in $sq-cols-sizes {
        .square-#{$size}-#{$col-size} {
           // creates the media query square versions like .square-lg-5 etc.
            width: #{100% * divide($col-size, $grid-columns, $divide-precision)};
            padding-bottom: calc-square-height($col-size) !important;
        }
    }

    @each $h, $sq-h in get-square-heights($size) {
        .square-#{$size}-h-#{$h} {
            // allows adjustments of square height
            --#{$prefix}sq-ratio: #{$sq-h};
        }
    }

}

// Squares
// For the basics of this square tile solution, see
// http://stackoverflow.com/questions/20456694/grid-of-responsive-squares

// Base square definition

.square-col {
    --#{$prefix}sq-ratio: 1;

    float: left;
    position: relative;
    width: 100%;
    padding-bottom: calc-square-height(12) !important;

    .content {
        position: absolute !important; // !important because otherwise OpenCms ADE will mix up the grid
        overflow: auto; // show overflow content with scrolling
        z-index: $overflow-z-index;
        border-radius: var(--#{$prefix}border-radius);

        height: calc(100% - 2 * var(--#{$prefix}sq-margin));
        width:  calc(100% - 2 * var(--#{$prefix}sq-margin));
        margin: var(--#{$prefix}sq-margin);

        background-position: center center;
        background-repeat: no-repeat;
        background-size: cover;

        @include media-breakpoint-up(md) {
            .effect-box {
                height: 100%;

                .image-src-box {
                    padding-bottom: unset !important;
                    height: 100%;

                    img {
                        object-fit: cover;
                    }
                }
            }
        }
    }

    &.square-1-1 {
        --#{$prefix}sq-ratio: 1;
    }

    &.square-16-9 {
        --#{$prefix}sq-ratio: #{divide(960, 1600, $divide-precision)}; // this gives better results in case of small elements with margins
    }

    &.square-4-3 {
        --#{$prefix}sq-ratio: #{divide(3, 4, $divide-precision)};
    }

    &.clear-row {
        clear: both;
    }

    // Table needed for alignment of content inside square
    // Table cell needed for alignment of content inside square
    .table-square {
        display: table;
        height: 100%;
        width: 100%;
        margin-bottom: 0;
        color: inherit;
    }

    .table-cell {
        display: table-cell;
        vertical-align: middle;
        height: 100%;
        width: 100%;
    }
}

// Allows to set the margin in the squares

@each $m in $sq-margins  {
    .square-m-#{$m} {
        --#{$prefix}sq-margin: #{$m}px;
    }
}

.square-col-list ul.list-entries.row-square,
.row-square {
    margin: calc(-1 * var(--#{$prefix}sq-margin));
    padding-bottom: var(--#{$prefix}element-margin);
}

.square-m-0 .square-col .content,
.square-m-0 .square-col .content .image-src-box,
.square-m-0 .square-col .content .image-src-box img {
    // if these is no border between the tiles, round corners are removed
    border-radius: 0;
}

.square-col-list {
    .square-col {
        // special "image tile" list adjustments
        .content {
            overflow: hidden; // no overflow to be shown on lists of type .square-col-list

            .list-badge {
                // position of event series badges in this list
                position: absolute;
                display: inline-block;
                padding: 2px 4px;
                top: 5px;
                right: 5px;
                text-shadow: none;

                &::after {
                    // remove noise image background
                    content: none;
                }
            }
        }

        &.square-small {
            .preface {
                // special handling of preface text in small image tiles
                @include media-breakpoint-up(md) {
                    display: none; // in md tiles are col-6 but are to small to show the preface text
                }
                @include media-breakpoint-up(lg) {
                    display: block; // in lg tiles are still col-6 and large enough to show the text
                }
                @include media-breakpoint-up(xl) {
                    display: none; // in xl the tiles are col-3/4 and to small to show the preface text
                }
            }
        }
    }
}

// Fixed with columns base

.fixcol {
    float: left;
    position: relative;
    min-height: 1px;
    padding-right: $grid-gutter-width-half;
    padding-left: $grid-gutter-width-half;
    width: 100%;
}


// extend the fixed with column as base responsive instance
@each $i in $fix-cols {
    @each $size in map-keys($grid-breakpoints) {
        .fixcol-#{$size}-#{$i},
        .fixcol-#{$size}-#{$i}-rest {
            @extend .fixcol;
        }
    }
}


// xs screen size squares
@include make-square-col(xs);

// xs screen size fixcols
@include make-fixcol(xs);

@include media-breakpoint-up(sm) {

    // sm screen size squares
    @include make-square-col(sm);

    // sm screen size fixcols
    @include make-fixcol(sm);
}

@include media-breakpoint-up(md) {

    // md screen size squares
    @include make-square-col(md);

    // md screen size fixcols
    @include make-fixcol(md);
}

@include media-breakpoint-up(lg) {

    // lg screen size squares
    @include make-square-col(lg);

    // lg screen size fixcols
    @include make-fixcol(lg);
}

@include media-breakpoint-up(xl) {

    // xl screen size squares
    @include make-square-col(xl);

    // xl screen size fixcols
    @include make-fixcol(xl);
}


.content-box {
    position: relative;
    border-radius: var(--#{$prefix}border-radius);
    overflow: hidden;
    z-index: $overflow-z-index;
}

.tile-col {
    position: relative;

    .boxbg-overlay {
        --#{$prefix}square-text-overlay-bg: #{$highlight-color};
        --#{$prefix}square-text-overlay-bg-rgb: #{to-rgb($highlight-color)};
        --#{$prefix}square-text-overlay-fg: #{$highlight-fg-color};
        --#{$prefix}square-text-overlay-bg-opacity: #{$square-overlay-boxbg-opacity};
        --#{$prefix}square-text-overlay-fg-shadow: none;
    }

    .full-overlay {
        position: absolute;
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        z-index: #{$overflow-z-index + 4}; // 2 above copyright z-index
        overflow: auto; // shows scrollbars on demand

        &:not(.boxbg-overlay) {
            background-color: $tile-overlay-bg-color;
            h1, h2, h3, h4, div.body, a.piece-text-link {
                color: $tile-overlay-text-color;
                text-shadow: $tile-overlay-text-shadow;
            }
        }

        &.boxbg-overlay {
            .piece {
                color: var(--#{$prefix}square-text-overlay-fg);
                background-color: rgba(var(--#{$prefix}square-text-overlay-bg-rgb), var(--#{$prefix}square-text-overlay-bg-opacity));

                display: inline-block;
                padding: calc(0.5 * var(--#{$prefix}box-padding));
                border-radius: var(--#{$prefix}image-border-radius);
            }
        }

        .piece {
            margin: calc(0.5 * var(--#{$prefix}box-padding));
        }
    }
}

.tile-col.element .copyright,
.tile-col.freefloat .copyright,
.list-entry .square-col .copyright {
    --#{$prefix}copyright-color: #{$square-overlay-text-color};
    --#{$prefix}copyright-bg-color: transparent;
    --#{$prefix}copyright-text-shadow: #{$square-overlay-text-shadow};
    @include image-copyright;
}

.tile-col,
.square-col {

    --#{$prefix}square-text-overlay-bg: #{$square-overlay-bg-color};
    --#{$prefix}square-text-overlay-bg-rgb: #{to-rgb($square-overlay-bg-color)};
    --#{$prefix}square-text-overlay-bg-opacity: #{$square-overlay-bg-opacity};
    --#{$prefix}square-text-overlay-fg: #{$square-overlay-text-color};
    --#{$prefix}square-text-overlay-fg-shadow: #{$square-overlay-text-shadow};
    --#{$prefix}square-text-overlay-padding-v: #{$square-text-overlay-padding-v};
    --#{$prefix}square-text-overlay-padding-h: #{$square-text-overlay-padding-h};
    --#{$prefix}square-paragraph-margin: #{$square-paragraph-margin};

    .text-overlay {
        position: absolute;
        bottom: 0;
        padding: var(--#{$prefix}square-text-overlay-padding-v) var(--#{$prefix}square-text-overlay-padding-h);
        background-color: rgba(var(--#{$prefix}square-text-overlay-bg-rgb), var(--#{$prefix}square-text-overlay-bg-opacity, 1));
        text-decoration: none;
        width: 100%;
        z-index: $overflow-z-index;
        @include use-hyphens-text();

        h1, h2, h3, h4, div {
            color: var(--#{$prefix}square-text-overlay-fg);
            text-shadow: var(--#{$prefix}square-text-overlay-fg-shadow);
            line-height: $square-overlay-line-height;
            margin: 0;
        }
        h1 {
            font-size: $square-overlay-h1-size;
        }
        h2 {
            font-size: $square-overlay-h2-size;
        }
        h3 {
            font-size: $square-overlay-h3-size;
        }
        h4 {
            font-size: $square-overlay-h4-size;
        }
        h2 + h3, // this us used with square list formatter
        div {
            font-size: $square-overlay-text-size;
        }
        .heading + .body,
        h2 + h3,
        div.teaser-date + h2 {
            margin-top: var(--#{$prefix}square-paragraph-margin);
        }
    }
    a:hover {
        text-decoration: none;
        h1, h2, h3, h4, h5, h6 {
            text-decoration: none;
        }
    }

    @include media-breakpoint-down(md) {

        &.text-below-on-xs:not(.revealed) {
            // reset tiles so that the overlay is below the image
            padding: 0 !important;

            &.square-4-3.square-xs-12,
            &.square-16-9.square-xs-12 {
                padding-bottom: 0 !important;
            }

            .content {
                height: auto !important;
                position: relative !important;
                .centered.image {
                    // required for media elements
                    position: static;
                    transition: none;
                    transform: none;
                }
                .text-overlay {
                    position: relative !important;
                }
            }

            .image-src-box > img,
            .image-src-box {
                border-bottom-left-radius: 0 !important;
                border-bottom-right-radius: 0 !important;
            }

            .text-overlay {
                --#{$prefix}square-text-overlay-bg: #{$square-overlay-bg-color-xs};
                --#{$prefix}square-text-overlay-bg-rgb: #{to-rgb($square-overlay-bg-color-xs)};
                --#{$prefix}square-text-overlay-bg-opacity: 1;
            }
        }
    }

    &.min-height-px .text-overlay {
        min-height: calc(#{2 * $square-overlay-h2-size * $square-overlay-line-height} + var(--#{$prefix}default-margin-small));
    }

    @include media-breakpoint-up(md) {
        &.square-small.min-height {
            .text-overlay {
                min-height: 20%;
            }
        }

        &.square-large {
            .text-overlay {
                h2 {
                    font-size: 2.0rem;
                }
                div,
                h3 {
                    font-size: 1.6rem;
                }
            }
        }
    }

    @include media-breakpoint-up(lg) {
        &.square-small.min-height {
            .text-overlay {
                min-height: 20%;
            }
        }
        &.square-small.show-preface {
            .text-overlay {
                min-height: 35%;
            }
        }
    }

    @include media-breakpoint-up(lg) {
        &.min-height {
            &.square-small {
                .text-overlay {
                    // for smaller cols the preface will be hidden, so we don't need so much space here
                    min-height: 40%; // 40% is equal to 2 lines of title text
                }
            }
            &.square-large {
                .text-overlay {
                    min-height: 18.5%;
                }
            }
        }
    }
}