// This program is part of the OpenCms Mercury Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file: _section.scss
 */

// Icon box formatter

.type-iconbox,
.imageflip {
    @include set-box-colors($main-theme, true, true);
}

.type-iconbox {
    color: var(--#{$prefix}body-color);
    background-color: var(--#{$prefix}body-bg);

    padding: var(--#{$prefix}box-padding);
    text-align: center;
    display: flex;
    flex-direction: column;

    border-radius: $iconbox-border-radius;
    overflow: hidden;
    z-index: $overflow-z-index;

    @if ($icon-box-use-colored-a) {
        @include colored-a(inherit, var(--#{$prefix}link-color));
    } @else {
        @include colored-a(inherit, none);
    }

    &:only-child {
        flex-grow: 1;
        flex-shrink: 1;
    }

    .icon-title {
        color: inherit;
        flex-grow: 1;
        margin-bottom: var(--#{$prefix}box-padding);
        line-height: $headings-line-height;
        @if ($icon-box-fix-heading-size) {
            font-size: $h4-font-size;
        }
        @include use-hyphens-headings(true);
    }

    .icon-text {
        margin-top: var(--#{$prefix}box-padding);
        margin-bottom: 0;
        > p {
            overflow-wrap: anywhere; // dont use hyphens: auto
            word-break: break-word;
            overflow: hidden; // just break up words that are too long
            text-overflow: ellipsis;
            &:last-of-type {
                margin-bottom: 0;
            }
        }
    }

    .icon-image {
        // no rem based font size here, we want the icon to be same size over all devices
        flex-grow: 2;
        font-size: 32px;
        display: flex;
        justify-content: center;
    }

    .icon-link {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        text-decoration: none;
        &:hover {
            text-decoration: none;
            h1, h2, h3, h4, h5, h6 {
                text-decoration: none;
            }
        }
    }

    @if ($icon-box-fix-heading-size) {
        @include media-breakpoint-up(md) {
            .icon-title {
                font-size: $h3-font-size;
            }
        }
    }
}

.type-linkbox {
    flex-grow: 1;
    @include text-tile(false);

    > a {
        &,
        &:focus,
        &:hover {
            color: var(--#{$prefix}body-color);
            text-decoration: none;
        }
        &:hover {
            span.piece-text-link {
                text-decoration: underline;
            }
        }
    }

    .linkbox-link,
    .linkbox-content.piece.full,
    .linkbox-content.piece.full .body {
        display: flex;
        flex-basis: auto;
        flex-direction: column;
        flex-grow: 100000;
    }
    .linkbox-content.piece.full .heading  {
        flex-grow: 1;
    }
}

// Image / text flip animation, see https://davidwalsh.name/css-flip#ieflip

.imageflip {
    color: var(--#{$prefix}body-color);

    perspective: 1000px;
    transform-style: preserve-3d;
    position: relative;

    // in contrast to the dw code we can not use fixed pixel height and width
    // however, we use the padding-bottom style trick (from the images) on the .flipper container to achieve the same effect

    &:hover {
        z-index: 50;

        .back {
            transform: rotateY(0deg);
            visibility: visible;
            opacity: 1;
        }
        .front:not(.noflip) {
            transform: rotateY(180deg);
            pointer-events: none;
        }
    }

    .flipper {
        width: 100%;
        transition: 0.6s;
        transform-style: preserve-3d;

        position: relative;
    }

    .front,
    .back {
        width: 100%;

        backface-visibility: hidden;
        transition: 0.6s;
        transform-style: preserve-3d;

        position: absolute;
        top: 0;
        left: 0;
    }

    .front {
        z-index: 2;
        transform: rotateY(0deg);
        // front will be only the image so we don't need to set height since image tags already do this
    }

    .back {
        transform: rotateY(-180deg);
        visibility: hidden;
        opacity: 0;
    }

    .text-section {
        border-radius: var(--#{$prefix}image-border-radius);
        padding: var(--#{$prefix}box-padding);
        height: 100%; // works because .flipper has the height fixed with padding-bottom
        overflow: auto; // shows scrollbars on demand

        color: var(--#{$prefix}body-color);
        background-color: var(--#{$prefix}body-bg);

        &.front:not(.noflip) {
            overflow: hidden; // if text is shown on front with flip, we can't scroll anyway
        }
    }

    .image-section {
        .heading {
            position: absolute;
            top: 0;
            left: 0;
            padding: calc(0.5 * var(--#{$prefix}box-padding));
            z-index: #{$overflow-z-index + 4}; // 2 above copyright z-index

            .text-heading {
                @include use-hyphens-headings(true);
                border-radius: var(--#{$prefix}image-border-radius);
                background-color: rgba(var(--#{$prefix}highlight-color-rgb), .75);
                padding: calc(0.5 * var(--#{$prefix}box-padding));
                margin-bottom: 0;
            }
        }
    }

    &.color-white {
        @include set-box-colors($body-bg);

        .text-section {
            border: 1px solid var(--#{$prefix}body-color);
        }
    }

    &.color-grey {
        @include set-box-colors($grey-lighter);
    }

    &.color-theme {
        // set-box-colors($main-theme) is not required because the default is set to $main-theme
        .image-section .heading .text-heading {
            background-color: rgba(var(--#{$prefix}body-bg-rgb), .75);
        }
    }
}

@include media-breakpoint-up(md) {
    // optional raise animation on flip
    html.desktop {
        .effect-flipraise .imageflip,
        .effect-flipraise.imageflip {
            &:hover {
                .back {
                    top: calc(-2 * var(--#{$prefix}box-padding));
                    left: calc(-2 * var(--#{$prefix}box-padding));
                    box-shadow: 0 0 15px 0 rgba(0,0,0,0.25);
                    width: calc(100% + (4 * var(--#{$prefix}box-padding)));
                    height: calc(100% + (4 * var(--#{$prefix}box-padding)));
                    &.text-section {
                        padding: var(--#{$prefix}box-padding);
                    }
                }
            }
        }
    }
}